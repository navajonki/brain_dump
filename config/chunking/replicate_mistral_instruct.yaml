# Configuration for using Replicate with Mistral Instruct
llm_backend: replicate
model: mistral:instruct  # This will be mapped to mistralai/mistral-7b-instruct-v0.2
temperature: 0.7
max_tokens: 4000
max_response_tokens: 1000

# Window configuration
window_size: 1000
overlap_size: 100

# Feature flags
use_function_calling: false
validate_function_output: false
global_check_enabled: true
tagging_enabled: true
relationships_enabled: true
track_transcript_positions: true

# Output settings
output_dir: output/chunks
debug: true

# Prompts
prompts:
  FIRST_PASS_PROMPT: |
    Extract atomic facts from the following text. An atomic fact is a single, self-contained piece of information that:
    1. Contains exactly ONE piece of information
    2. Can stand alone without context
    3. Has no ambiguous pronouns (replace them with actual names/entities)
    4. Includes relevant temporal information if available
    
    Guidelines:
    - Each fact should be a complete, standalone statement
    - Replace pronouns with specific names/entities
    - Include speaker attribution if clear from context
    - Include temporal markers if present
    - Break compound statements into individual facts
    
    Text to process:
    {window_text}
    
    Format each fact as a dictionary with:
    - text: The atomic fact
    - confidence: Confidence score (0.0-1.0)
    - source: Source of the information (e.g., "speaker", "context", "inference")
    - temporal_info: Any time-related information
    - entities: Named entities mentioned
    
    Return your response in JSON format:
    ```json
    {
      "facts": [
        {
          "text": "Fact 1",
          "confidence": 0.9,
          "source": "speaker",
          "temporal_info": "2020",
          "entities": ["Person1", "Organization1"]
        },
        {
          "text": "Fact 2",
          "confidence": 0.8,
          "source": "context",
          "temporal_info": "",
          "entities": ["Person2"]
        }
      ]
    }
    ```
  
  SECOND_PASS_PROMPT: |
    I've already extracted the following facts from this text:
    
    {facts_text}
    
    Please review the original text again and extract any additional atomic facts that were missed in the first pass.
    
    Original text:
    {window_text}
    
    Return only new facts that weren't already extracted. Format your response as a JSON array of fact objects:
    ```json
    {
      "additional_facts": [
        {
          "text": "New fact 1",
          "confidence": 0.9,
          "source": "speaker",
          "temporal_info": "",
          "entities": []
        },
        {
          "text": "New fact 2",
          "confidence": 0.8,
          "source": "context",
          "temporal_info": "",
          "entities": []
        }
      ]
    }
    ```
    
    If there are no additional facts to extract, return an empty array:
    ```json
    {
      "additional_facts": []
    }
    ```
  
  GLOBAL_CHECK_PROMPT: |
    Please review the following facts extracted from a document and identify:
    1. Redundant facts that can be merged
    2. Contradicting facts that need resolution
    3. Timeline issues or inconsistencies
    
    Facts:
    {facts_text}
    
    Respond in JSON format:
    ```json
    {
      "redundancies": [
        {
          "facts": ["redundant fact 1", "redundant fact 2"],
          "merged_fact": "merged version of the facts"
        }
      ],
      "contradictions": [
        {
          "facts": ["contradicting fact 1", "contradicting fact 2"],
          "resolution": "resolved version of the contradiction"
        }
      ],
      "timeline_issues": [
        {
          "facts": ["fact with timeline issue"],
          "correction": "corrected version of the fact"
        }
      ]
    }
    ```
  
  TAGGING_PROMPT: |
    Analyze this fact and provide detailed categorization:
    
    Fact: {fact_text}
    
    1. Tags: List relevant keywords that describe key aspects (e.g., "military", "education", "health", "family")
    2. Topic: The main theme or category this fact belongs to
    3. Entities: Identify and categorize all named entities
    4. Temporal Context: Any time period or sequence information
    5. Relationships: Any mentioned relationships between entities
    
    Respond in JSON format:
    ```json
    {
      "tags": ["tag1", "tag2"],
      "topic": "main_topic",
      "entities": {
        "people": ["person1", "person2"],
        "places": ["place1", "place2"],
        "organizations": ["org1", "org2"],
        "other": ["entity1", "entity2"]
      },
      "temporal_context": {
        "period": "time_period",
        "sequence": "sequence_info"
      },
      "relationships": [
        {
          "entity1": "name1",
          "relation": "type",
          "entity2": "name2"
        }
      ]
    }
    ```
  
  RELATIONSHIP_PROMPT: |
    Analyze the semantic relationships between the following facts and identify which facts are related to each other.
    
    Facts:
    {facts_text}
    
    For each fact, list the numbers of related facts. Respond in JSON format:
    ```json
    {
      "1": [2, 5, 7],
      "2": [1, 3],
      ...
    }
    ```
    
    Where the keys are fact numbers and the values are arrays of related fact numbers. 